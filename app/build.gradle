apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies { classpath 'io.fabric.tools:gradle:1.+' }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.dbeginc.dbweather"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 5
        versionName "1.4"
        multiDexEnabled false
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 17
        renderscriptSupportModeEnabled false

        buildTypes.each {
            it.buildConfigField('String', 'YOUTUBE_API_KEY', YoutubeApiKey)
            it.buildConfigField('String', 'MobileAds', MobileAds)
        }
    }

    lintOptions {
        //lint rules
        apply from: "${rootDir}/config/lint.gradle", to: it
        //locations for the rules and output
        lintConfig file("${rootDir}/config/lint/lint-config.xml")
        htmlOutput file("${buildDir}/reports/lint/lint.html")
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            lintOptions {
                abortOnError false
            }
        }
    }
    //Show all the result of unitTest
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    configurations.all() {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:+'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/INDEX.LIST'
    }

    dataBinding { enabled = true }

    testOptions { unitTests.returnDefaultValues = true }

    dexOptions { preDexLibraries = false }

    sourceSets {
        test.java { srcDirs += new File(buildDir, 'src/test/kotlin') }

        androidTest.java { srcDirs += new File(buildDir, 'src/androidTest/kotlin') }

        main {
            java { srcDirs += new File(buildDir, 'src/main/kotlin') }
        }
    }
}

androidExtensions {
    experimental = true
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(":dbweatherdata")
    implementation project(":dbweatherdomain")
    implementation project(":dbweathernews")
    implementation project(":dbweatherweather")

    //GOOGLE
    implementation androidSupportLibs.constain_layout
    implementation androidSupportLibs.appcompat_v7
    implementation androidSupportLibs.design
    implementation androidSupportLibs.recyclerview
    implementation androidSupportLibs.support_v13
    implementation androidSupportLibs.support_core_utils
    implementation androidSupportLibs.support_v4
    implementation androidSupportLibs.customtabs
    implementation androidSupportLibs.cardview_v7
    // Android Arch Lifecycle
    implementation architectureComponentLibs.lifecycle_extensions

    // Dagger
    implementation daggerLibs.dagger
    implementation daggerLibs.dagger_android
    implementation daggerLibs.dagger_android_support

    compileOnly rxLibs.rxJava

    //SQUARE
    compileOnly otherLibs.threetenabp

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.0@aar') {
        transitive = true
    }
    implementation files('libs/YouTubeAndroidPlayerApi.jar')

    // Google libs
    implementation googleLibs.firebase_ads
    implementation googleLibs.play_services_location
    // Glide libs
    implementation glideLibs.glide
    implementation glideLibs.annotations
    implementation glideLibs.okhttp3_integration
    implementation  (glideLibs.recyclerview_integration) {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }

    // We be added in next release
    //implementation otherLibs.evernote_android_job
    implementation otherLibs.lottie
    implementation otherLibs.bottom_bar
    implementation otherLibs.fab
    implementation otherLibs.viewAnimator

    androidTestImplementation(androidSupportLibs.espresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    testImplementation testingLibs.junit
    testImplementation testingLibs.mockito

    kapt daggerLibs.dagger
    kapt daggerLibs.dagger_processor
    kapt daggerLibs.dagger_android_support
    kapt daggerLibs.dagger_processor
    kapt daggerLibs.dagger_compiler
    kapt androidSupportLibs.databinding
    kapt architectureComponentLibs.lifecycle_compiler
    kapt glideLibs.compiler
}

configurations {
    implementation.exclude group: "org.apache.httpcomponents", module: "httpclient"
    implementation.exclude group: "xpp3", module: "xpp3"
}

apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'

/*
 *  Copyright (C) 2017 Darel Bitsy
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 */

////code quality tools
apply from: "${rootDir}/config/codequality-findbugs.gradle"
apply from: "${rootDir}/config/codequality-pmd.gradle"
apply from: "${rootDir}/config/codequality-checkstyle.gradle"

////code coverage
apply from: "${rootDir}/config/codecoverage.gradle"
