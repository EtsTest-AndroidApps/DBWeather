apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

android {
    signingConfigs {
    }
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.dbeginc.dbweather"
        minSdkVersion 17
        targetSdkVersion 26
        multiDexEnabled = true
        versionCode 4
        versionName "1.3"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 18
        renderscriptSupportModeEnabled true

    }

    lintOptions {
        //lint rules
        apply from: "${rootDir}/config/lint.gradle", to: it
        //locations for the rules and output
        lintConfig file("${rootDir}/config/lint/lint-config.xml")
        htmlOutput file("${buildDir}/reports/lint/lint.html")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        buildTypes.each {
            it.buildConfigField('String', 'YOUTUBE_API_KEY', YoutubeApiKey)
            it.buildConfigField('String', 'NEWS_API_KEY', NewsApiKey)
            it.buildConfigField('String', 'WEATHER_API_KEY', WeatherApiKey)
            it.buildConfigField('String', 'GEONAME_USERNAME', GeoNameUserName)
            it.buildConfigField('String', 'EMAIL_ACCOUNT', EmailAccount)
        }
    }
    //Show all the result of unitTest
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    configurations.all() {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:+'
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/INDEX.LIST'
    }
    dataBinding { enabled = true }

    testOptions { unitTests.returnDefaultValues = true }

    dexOptions { preDexLibraries = false }

    productFlavors {}

    sourceSets {
        test.java { srcDirs += 'src/test/kotlin' }

        androidTest.java { srcDirs += 'src/androidTest/kotlin' }

        main {
            java { srcDirs += 'src/main/kotlin' }
        }
    }
}



dependencies {
    implementation 'com.android.support:support-v4:26.1.0'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(":dbweatherdata")

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //GOOGLE
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.apis:google-api-services-translate:v2-rev51-1.22.0'
    compile 'com.google.http-client:google-http-client-gson:1.22.0'
    compile 'com.google.api-client:google-api-client-android:1.22.0'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.android.support:multidex:1.0.2'
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:support-v13:$supportLibraryVersion"
    compile "com.android.support:support-core-utils:$supportLibraryVersion"
    compile "com.android.support:support-v4:$supportLibraryVersion"
    compile "com.android.support:customtabs:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.google.android.gms:play-services-location:$googleLibraryVersion"
    compile "com.google.firebase:firebase-core:$googleLibraryVersion"
    compile "com.google.firebase:firebase-ads:$googleLibraryVersion"
    compile "com.google.firebase:firebase-database:$googleLibraryVersion"

    //Dagger
    compile "com.google.dagger:dagger:$daggerLibraryVersion"
    compile "com.google.dagger:dagger-android:$daggerLibraryVersion"
    compile "com.google.dagger:dagger-android-support:$daggerLibraryVersion"

    // if you use the support libraries
    compile "com.google.dagger:dagger-android:$daggerLibraryVersion"

    //Rx JAVA
    compile 'io.reactivex.rxjava2:rxjava:2.1.2'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.2-SNAPSHOT'
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.1"

    //SQUARE
    compile 'com.facebook.stetho:stetho:1.5.0'
    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    compile 'com.squareup.okhttp3:okhttp:3.9.0-SNAPSHOT'
    compile 'com.squareup.retrofit2:retrofit:2.4.0-SNAPSHOT'
    compile 'com.squareup.retrofit2:converter-gson:2.4.0-SNAPSHOT'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.4.0-SNAPSHOT'
    compile 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    compile('com.squareup.retrofit2:converter-simplexml:2.4.0-SNAPSHOT') {
        exclude module: 'stax-api'
    }

    //OTHER
    compile "org.jetbrains.anko:anko-coroutines:0.10.2"
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.airbnb.android:lottie:2.2.5'
    compile 'com.roughike:bottom-bar:2.3.1'
    compile 'com.github.clans:fab:1.6.4'
    compile 'com.github.florent37:viewanimator:1.0.5'
    compile 'com.jakewharton.timber:timber:4.5.1'

    // Glide stuff
    compile 'com.github.bumptech.glide:glide:4.1.1'
    compile 'com.github.bumptech.glide:okhttp3-integration:4.1.1'
    compile 'com.github.bumptech.glide:annotations:4.1.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.1.1'
    kapt 'com.github.bumptech.glide:compiler:4.1.1'

    // Android Arch Lifecycle
    compile "android.arch.lifecycle:runtime:1.0.0"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha9-1"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-alpha9-1"

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.8.47'

    annotationProcessor "com.google.dagger:dagger-compiler:$daggerLibraryVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerLibraryVersion"

    kapt "com.google.dagger:dagger-compiler:$daggerLibraryVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerLibraryVersion"
    kapt "com.android.databinding:compiler:$androidPluginVersion"

    compile('com.crashlytics.sdk.android:crashlytics:2.7.0@aar') {
        transitive = true
    }
    compile files('libs/YouTubeAndroidPlayerApi.jar')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

configurations {
    compile.exclude group: "org.apache.httpcomponents", module: "httpclient"
    compile.exclude group: "xpp3", module: "xpp3"
}

apply plugin: 'io.fabric'
apply plugin: 'findbugs'

////code quality tools
apply from: "${rootDir}/config/codequality-findbugs.gradle"
apply from: "${rootDir}/config/codequality-pmd.gradle"
apply from: "${rootDir}/config/codequality-checkstyle.gradle"

////code coverage
apply from: "${rootDir}/config/codecoverage.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android-extensions'