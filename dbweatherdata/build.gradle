/*
 *  Copyright (C) 2017 Darel Bitsy
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildTypes.each {
            it.buildConfigField('String', 'YOUTUBE_API_KEY', YoutubeApiKey)
            it.buildConfigField('String', 'NEWS_API_KEY', NewsApiKey)
            it.buildConfigField('String', 'WEATHER_API_KEY', WeatherApiKey)
            it.buildConfigField('String', 'GEONAME_USERNAME', GeoNameUserName)
            it.buildConfigField('String', 'EMAIL_ACCOUNT', EmailAccount)
            it.buildConfigField('String', 'GOOGLE_TRANSLATE_API_KEY', GoogleTranslateApiKey)
            it.buildConfigField('String', 'YANDEX_TRANSLATE_API_KEY', YandexTranslateApiKey)
        }

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            multiDexEnabled true
            shrinkResources false
            minifyEnabled false
            testCoverageEnabled = true
        }
    }

    packagingOptions {
        pickFirst "protobuf.meta"
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
        }
    }
}


dependencies {
    api project(":dbweatherdomain")

    api('com.crashlytics.sdk.android:crashlytics:2.9.0@aar') {
        transitive = true
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation kotlinLibs.stdlib
    implementation apache.commons_text

    /************* Translate dependencies ***********/
    implementation googleLibs.api_services_translate
    implementation googleLibs.http_client_android
    implementation rxLibs.rxAndroid
    implementation architectureComponentLibs.roomRuntime
    implementation architectureComponentLibs.roomRxJava
    implementation googleLibs.firebase_database
    implementation googleLibs.firebase_storage
    /***************** Network *****************/
    implementation (networkLibs.android_networking, {
        exclude group: 'com.android.support'
    })
    implementation networkLibs.gson
    implementation networkLibs.okhttp
    implementation networkLibs.retrofit2
    implementation networkLibs.rxJavaAdapter
    implementation(networkLibs.simpleXmlConverter) {
        exclude module: 'stax-api'
    }
    compileOnly otherLibs.threetenabp
    /********************************************/
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestImplementation testingLibs.junit
    androidTestImplementation testingLibs.hamcrest_library
    androidTestImplementation architectureComponentLibs.core_testing
    androidTestImplementation kotlinLibs.kotlin_test_junit

    testImplementation testingLibs.junit
    testImplementation testingLibs.mockito
    testImplementation testingLibs.hamcrest_library
    testImplementation testingLibs.mockwebserver
    testImplementation kotlinLibs.kotlin_test_junit

    kapt architectureComponentLibs.compiler

}

configurations {
    compile.exclude group: "org.apache.httpcomponents", module: "httpclient"
    compile.exclude group: "xpp3", module: "xpp3"
}